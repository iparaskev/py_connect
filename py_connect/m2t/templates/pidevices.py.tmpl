from pidevices import {{ device_class }}
import time                                                     
{% if is_sensor -%}
from commlib.transports.amqp import Publisher, ConnectionParameters
import random
{% else %}
from commlib.transports.amqp import Subscriber, ConnectionParameters
{% endif -%}

class Node():
    """Runing node."""

    def __init__(self):
        topic = "{{ topic }}"
	conn_params = ConnectionParameters()
        conn_params.credentials.username = "{{ username }}"
        conn_params.credentials.password = "{{ password }}"
        conn_params.host = "{{ host }}"
        conn_params.port = {{ port }}                      

	self.dev = {{ device_class }}({% for key, value in args.items() -%}
				      {{ key }}={{ value }},
				      {%- endfor -%}
				      )
        {% if is_sensor %}
	self.publisher = Publisher(conn_params=conn_params,
                                   topic=topic)
	{% else %}
        self.subscriber = Subscriber(conn_params=conn_params,
                                     topic=topic,
                                     on_message=self.callback)
	self.subscriber.run()
	{% endif %}
	
	def run(self, freq={{ freq }}):
            while True:
                {% if is_sensor -%}
                data = self.dev.read()
	        {{ data }}
                self.publisher.publish(data)
                {% endif -%}
                time.sleep(1/freq)
    
    {% if not is_sensor %}
    def callback(self, msg, meta):
        try:
            self.dev.write(**msg)
	    print(msg)
	except TypeError:
	    print("Unexpected argument. The proper msg is {{ data }}")
    {% endif %}


def main():
    node = Node()
    node.run()


if __name__ == "__main__":
    main()
